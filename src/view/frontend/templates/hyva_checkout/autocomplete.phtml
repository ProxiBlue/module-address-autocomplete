<?php

/*
 * Shipper HQ
 *
 * @category ShipperHQ
 * @package ShipperHQ_AddressAutocomplete
 * @copyright Copyright (c) 2020 Zowta LTD and Zowta LLC (http://www.ShipperHQ.com)
 * @license http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @author ShipperHQ Team sales@shipperhq.com
 */

// @codingStandardsIgnoreFile

/** @var $viewModel ShipperHQ\AddressAutocomplete\ViewModel\Autocomplete */

$viewModel = $block->getViewModel();

?>
<script>
    (function () {
        if (typeof window.CustomEvent === "function") return false;

        function CustomEvent(event, params) {
            params = params || {bubbles: false, cancelable: false, detail: undefined};
            var evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
            return evt;
        }

        CustomEvent.prototype = window.Event.prototype;
        window.CustomEvent = CustomEvent;
    })();

    var placeSearch, autocomplete;
    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'long_name',
        country: 'short_name',
        postal_code: 'short_name',
        postal_town: 'short_name',
        sublocality_level_1: 'short_name'
    };

    var lookupElement = {
        street_number: 'street',
        route: 'street-1',
        locality: 'city',
        administrative_area_level_1: 'region',
        country: 'country_id',
        postal_code: 'postcode'
    }
    window.gm_authFailure = function () {
        document.getElementById('street').setAttribute('placeholder', '');
        document.getElementById('street').removeAttribute("style");
        document.getElementById('street').removeAttribute("disabled")
        google.maps.event.clearInstanceListeners(document.getElementById('street'));
        removeElementsByClass("pac-container")
    };

    /**
     * Removes element by class name. Credit to
     * https://stackoverflow.com/questions/4777077/removing-elements-by-class-name
     *
     * @param className
     */
    function removeElementsByClass(className) {
        const elements = document.getElementsByClassName(className);
        while (elements.length > 0) {
            elements[0].parentNode.removeChild(elements[0]);
        }
    }

    function initAutocomplete() {
        var input = document.getElementById('street');

        input.addEventListener('focus', geolocate, true);

        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('street')),
            {types: ['geocode']});

        autocomplete.addListener('place_changed', fillInAddress);

    }

    function fillInAddress() {
        var place = autocomplete.getPlace();

        var street = [];
        var region = '';
        var city = '';
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i][componentForm[addressType]];
                if (addressType == 'street_number') {
                    street[0] = val;
                } else if (addressType == 'route') {
                    street[1] = val;
                } else if (addressType == 'administrative_area_level_1') {
                    region = val;
                } else if (addressType == 'sublocality_level_1') {
                    city = val;
                } else if (addressType == 'postal_town') {
                    city = val;
                } else if (addressType == 'locality' && city == '') {
                    //ignore if we are using one of other city values already
                    city = val;
                } else {
                    var elementId = lookupElement[addressType];
                    element = document.getElementById(elementId);
                    element.value = val;
                    element.dispatchEvent(new Event('input'));
                }
            }
        }
        if (street.length > 0) {
            document.getElementById('street').value = street.join(' ');
            document.getElementById('street').dispatchEvent(new Event('input'));
        }
        element = document.getElementById('city');
        element.value = city;
        element.dispatchEvent(new Event('input'));

        if (region != '') {
            if (document.getElementById('region')) {
                var regionSelector = document.getElementById('region');
                for (i = 0; i < regionSelector.length; i++) {
                    if (regionSelector.options[i].text === region) {
                        regionSelector.selectedIndex = i;
                        regionSelector.dispatchEvent(new Event('change'));
                        break;
                    }
                }
            }
        }
        /**
         * we need a small delay to allow magewire to communicate with the elements and update the form
         */
        timeout = setTimeout(() => doSave(), 500)
        removeElementsByClass("pac-container");
    }

    function doSave() {
        clearTimeout(timeout);
        window.dispatchEvent(
            new CustomEvent('magewire:loader:start', { detail: { loading: true }})
        );
        magewire.find('checkout.shipping-details.address-form').save(true);

        setTimeout(() => initAutocomplete(), 1000);
    }

    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

</script>
<script
    src="https://maps.googleapis.com/maps/api/js?key=<?php echo $viewModel->getConfig('shipping/shipper_autocomplete/google_api_key') ?>&libraries=places&callback=initAutocomplete"
    async defer></script>
